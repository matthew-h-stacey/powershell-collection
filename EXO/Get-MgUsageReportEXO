# Objective:
# Return the 365 usage report for EXO
# Optionally filter the output for a specific group (supports nested membership)

function Get-MgUsageReportEXO {

    [SkyKickCommand(DisplayName = "Set Parameter Sections", Sections = { "Range", "Filter", "Output" })]
    param(
        [SkyKickParameter(
            Section = "Range",
            DisplayName = "Past X days",
            DisplayOrder = 1
        )]
        [Parameter(Mandatory = $true)]
        [String]
        [ValidateSet("7", "30", "90", "180")]
        $Range,

        [SkyKickParameter(
            Section = "Filter",
            DisplayName = "(Optional) Filter results by Azure AD group",
            DisplayOrder = 1,
            HintText = "Enter the display name of an Azure AD group to filter the results by."
        )]
        [Parameter(Mandatory = $false)]
        [string] $GroupDisplayName,

        [SkyKickParameter(
            Section = "Output",
            DisplayName = "File output format",
            DisplayOrder = 1
        )]
        [Parameter(Mandatory = $true)]
        [String]
        [ValidateSet("HTML","CSV")]
        $OutputFormat
    )

    # Note: If user display name/UserPrincipalnames are obfuscated and need to be shown, a data privacy setting is enabled that needs to be disabled:
    # Settings>Org Settings>Services>Reports>[ ] Display concealed user, group, and site names in all reports
    # https://learn.microsoft.com/en-us/microsoft-365/admin/activity-reports/activity-reports?view=o365-worldwide
    
    # "Microsoft 365 usage reports show how people in your business are using Microsoft 365 services. Reports are available for the last 7 days, 30 days, 90 days, and 180 days. Data won't exist for all reporting periods right away. The reports become available within 48 hours."

    $ReportFooter = "Report created using SkyKick Cloud Manager"
    $ClientName = (Get-CustomerContext).CustomerName
    $FilePath = "/cloud-manager/users/System/" + $ClientName.Replace(" ", "_") + "_EmailActivity.csv"
    $Output = @()
    $Uri = "https://graph.microsoft.com/v1.0/reports/getEmailActivityUserDetail(period='D" + $Range + "')"
    Invoke-MgGraphRequest -Method GET -Uri  $Uri -OutputFilePath $FilePath                                                                                                                     
    $CSV = Import-Csv $FilePath 
    $ReportTitle = "$ClientName Email Activity Report (past $Range days) - as of $(($csv | Select-Object -ExpandProperty 'Report Refresh Date')[0])"

    $Mailboxes = Get-Mailbox -ResultSize Unlimited | Select-Object UserPrincipalName, PrimarySmtpAddress

    if ($GroupDisplayName) {

        # Retrieve the group
        $Filter = "DisplayName eq '" + $GroupDisplayName + "'"
        try {
            $MgGroup = Get-MgGroup -Filter $Filter
            # Recursively retrieve all members (includes nested group membership
            $Members = Get-MgGroupTransitiveMember -GroupId $MgGroup.Id -All

            # Array with only the display names of the users
            $MembersDisplayNames = ($Members.AdditionalProperties).displayName | Sort-Object

            Write-Output "[INFO] Filtering output by members of group: $GroupDisplayName"
        }
        catch {
            throw "Failure: Unable to locate MgGroup: $DisplayName"
        }
    
    }
    else {
        Write-Output "[INFO] No filter provided. Generating report for all users"
    }

    $CSV | ForEach-Object {
        $UserPrincipalName = $_.'User Principal Name'
        $PrimarySmtpAddress = $Mailboxes | Where-Object { $_.UserPrincipalName -eq $UserPrincipalName } | Select-Object -ExpandProperty PrimarySmtpAddress 
        $User = [PSCustomObject]@{
            DisplayName            = $_.'Display Name'
            UserPrincipalName      = $UserPrincipalName
            PrimarySmtpAddress     = $PrimarySmtpAddress
            LastActivityDate       = $_.'Last Activity Date'
            SendCount              = $_.'Send Count'
            ReceiveCount           = $_.'Receive Count'
            ReadCount              = $_.'Read Count'
            MeetingCreatedCount    = $_.'Meeting Created Count'
            MeetingInteractedCount = $_.'Meeting Interacted Count'
        }

        if ($GroupDisplayName) {
            $UserInGroup = $MembersDisplayNames -contains $User.DisplayName
            if ($UserInGroup ) { 
                $Output += $User
            }
        }
        else {
            $Output += $User
        }
    }
    
    if ( $Output ) {
        $Output = $Output | Sort-Object DisplayName
        Out-SKSolutionReport -Content $Output -ReportTitle $ReportTitle -ReportFooter $ReportFooter -FileExportType $OutputFormat
    }
    else {
        "[INFO] Output is empty, no data to export. Please try again"
    }

}